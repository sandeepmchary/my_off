---
Installig node js 

	- curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
	- sudo apt install nodejs -y
	- node --version
	- npm --version
	- npm i
	- npm init -y
	- cat package.json
	- npm install express
=================
CREATING CUSTOM IMAGE
- vi Dockerfile
	- FROM node:15
	  WORKDIR /app
	  COPY package.json
	  RUN npm install
	  COPY . ./
	  EXPOSE 3000
	  CMD ["node", "index.js"]

- docker build -t node_app:v1 .
- docker run -d -p 3000:3000 --name docker_pro:v1 
- docker exec -it docker_pro bash
- docker rm docker_pro -f
----------------------------------------
- vi .dockerignore
	- node_modules
	  Dockerfile
	  .dockerignore
	  .git
	  .gitignore
========================================
Volume_binding
    - docker run -v $(pwd):/app -p 3000:3000 -d --name node-app1 
    - HERE THE THING IS NODEMOD
    - IN NODE OR EXPRESS APPLICATION ANYTIME WE MAKE CHANGES TO CODE WE HAVE TO RESTART THE NODE PROCESS
    - HERE WE DID NOT RESTARTED THE NODE PROCESS
    - WE ONLY CHANGED THE CODE
    - WE HAVE TO USE NODEMOD 
    - NODEMOD ALWAYS LOOKS FOR THE CHANGE IT GOING TO RESTART THE NODE PROCESS SO THE CHANGES ARE UPDATED IN REAL TIME
    - sudo npm install nodemon --save-dev (this is going to be dev dependency just becoz we dont need it to run 
      when we actually deploy in the production)
    - in the package.json we need setup a few scripts
        - in the scripts 
            "start": "node index.js"
            "dev": "nodemon index.js"(it's going to automatically restart node process for any changes to the source code)
            (if we use windows version use nodemon -L index.js)
    - we need to change some thing in the Dockerfile also
     vi Dockerfile
        - FROM node:15
          WORKDIR /app
          COPY package.json .
          RUN npm install
          COPY . ./
          EXPOSE 3000
          # CMD [ "node","index.js" ]
          CMD ["npm", "run", "dev"]
    - docker build -t node_pro:v1 .
    - docker run -it -v <path>:/app --name docker_project node_pro:v1
    - docker ps -a
    - curl ip:3000
======================================================================
- here we deleted the node_modules folder 
    -  docker run -v $(pwd):/app -p 3000:3000 -d --name node_app node_app_image
    - docker ps -a
    - docker rm node_app -f
- actually we used the -v for Volume_binding
- so here we deleted the node_modules so in the container also it will deleted 
- this is sync
- here we are looking for new Volume_binding
- first delete the broken container
- docker rm docker_project -f
- all volumes in docker are based on specifity
- so we use another volume here, -v /app/node_modules
- first bind mount -v $(pwd):/app is sync with the /app directory 
- we can see that another volume that references the -v /app/node_modules
- this -v is going to prevent deleting the /app/node_modules 
- in general way the second -v says "hey dont touch this node_modules folder "
- the bind mount will sync the other files 
- it just cannot touch the node_modules folder
    - docker run -v $(pwd):/app -v /app/node_modules -p 3000:3000 -d --name node_app node_app:v2
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- READ ONLY VOLUMES
- here the thing if we go for volumes it will also change the source code 
- so we need to go with read only 
- cd /pro
- docker run -v $(pwd):/app:ro -v /app/node_modules -p 3000:3000 -d --name node_app node_app_image
- docker rm node_app -f (removing the container)
============================================================================================
- ENVIRONMENTAL VARIABLES
	- vi Dockerfile
		FROM node:15
		WORKDIR /app
	    COPY package.json .
		RUN npm install
		COPY . ./
		# if the value of port is not given then 3000 is taken as default value 
		ENV PORT 3000
		# The Value of port is submitted here
		EXPOSE $PORT
		# CMD [ "node","index.js" ]
        CMD ["npm", "run", "dev"]
- docker rm -f node_app
- we changed the Dockerfile 
- we have to rebuild the code
- docker images
- docker build -t node_app_image .
- for any none images 
	- docker rmi $(docker images -a -q --filter "dangling=true")
- in the Dockerfile we can also override the default value of the PORT
- docker run -v $(pwd):/app -v /app/node_modules --env PORT=4000 -d -p 3000:4000 --name node_app node_app_image
- docker ps -a
- for double check we need to change the index.js file
- change the value of <h1> This is for testing</h1>
- docker exec -it node_app bash
- in the container
	- printenv
	- exit
- in the application we have lot of environmental variables
- for example
	- docker run -v $(pwd):/app -v /app/node_modules --env PORT=4000 --env PORT=5000 --name node_app node_app_image
- for example if we have 10 environmental variables then it is best to have a file and fill the all the ports in the file 
	- vi .env
		PORT=4000
		PORT=5000
- docker run -v $(pwd):/app -v /app/node_modules --env-file ./.env -d -p 3000:4000 --name node_app node_app_image
_____________________________________________________________________________________________________________

- DOCKER VOLUMES
	= docker volume ls
	= docker volume prune (this will remove all the unneccessary volumes)
	= docker volume ls
	= docker ps -a
	= docker rm node_app -fv(v will delete the volume attached to this container)
_____________________________________________________________________________________________________________
- DOCKER COMPOSE
	- install docker compose
		- sudo curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	- sudo chmod +x /usr/local/bin/docker-compose
	- docker-compose --version
============================================
- vi docker-compose.yml
		- version: "3"
services: 
    node_app:
        build: .
        ports: 
            - "3000:3000"
        volumes: 
            - ./:/app
            - /app/node_modules
        environment: 
            - PORT=3000
        # env_file: 
        #    - ./.env    
============================================
	docker-compose up -d
	docker image ls
	it will create the image name with the directory name_service name
	docker ps -a
	vi index.js
	change the <h1> learning devops</h1>
	docker-compose down -v
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	- docker-compose down -d --build
	- docker-compose up -d 
	- docker-compose up -d will not build the new changes in the Dockerfile 
	- we need to specify the --build cmd then only it will build the new changes in the Dockerfile
	- so new build we use 
		- docker-compose up -d --build
	- how we have seperate set of commands for production and development
	- 
_____________________________________________________________________________________________________________
	- there are some diff b/w prod and dev environments
	- mostly here we need to change in the Dockerfile 
		- CMD ["npm", "run" ,"dev"] -- for dev
		- CMD ["node", "index.js "] -- for prod
	- rename the docker-compose.yml to docker-compose_backup.yml
	- create brand new docker-compose.yml file
	- create 2 .yml files 
		- docker-compose.dev.yml
		- docker-compose.prod.yml -- in prod we dont need to binding volumes 
	- creating the docker-compose.yml
		version: "3"
		services:
		  node_app
		  build: .
		  ports:
		    - "3000:3000"
		  environment:
		    - PORT=3000
	- the final image is the same from Dockerfile
	- we can overwrite the ports with dev and prod yml files
	- in the dev yml file ,we need volumes and extra volumes for the node_modules not getting deleted
	- here we need to change the environment values and change the command to npm run dev
	- in the package.json we have the script to run nodemon it restart our code in the dev env
=====================================================================================
		- vi docker-compose.dev.yml
			- version: "3"
			  services:
			    node_app:
				  volumes:
				    - ./:/app
					- /app/node_modules
				  environment:
				    - NODE_ENV=development
				  command: npm run dev
====================================================================================
	- in the prod file what needed to change
		- we dont need volume
		- change the environment values to prod
		- change the command to "node" ,"index.js"
=====================================================================================
	vi docker-compose.prod.yml
		- version:"3"
		  services:
		    node_app:
			  environment:
			    - NODE_ENV=production
			  command: node index.js
=====================================================================================
	- docker-compose down -v
	- here we are running to docker-compose files
	- docker-compose.yml and docker-compose.dev.yml (base+dev)
	- docker-compose.yml and docker-compose.prod.yml (base+prod)
	- -f for file
	- docker-compose -f docker-compose.yml -f docker-compose.dev.yml
	- it will load all the configuration file from the base file(docker-compose.yml) and load all the configuration file from the dev file (docker-compose.dev.yml)
	- if it needs to override the base file
	- docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
	- docker ps -a
	- change some thing in the index.js file 
	- check the file in the web 
	- docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
	- now for the prod 
		- docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d build
	- check for the update 
	- there should be not update
	- change the index.js file 
	- it should not change
		-docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v
		-docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build
	- as there is not bind mount to see the udpate we need to build it
		- docker exec -it <name of the container> bash
	- as we can see all the docker-compose files so we NEED TO CHANGE THE DOCKERIGNORE FILE 
		- exit
=========================================
	- vi .dockerignore
		-docker-compose*.yml
=========================================
		- docker exec -it <name of the container> bash
		- cd node_modules
		- ls
	- we can see nodemon,if we check in the package.json file nodemon is dev dependency, we dont use nodemon in production 
	- nodemon automatically restarts the code, which is not required in the prod
	- to prevent nodemon from installing taking space and does nothing
	- so we need to change the Dockerfile that if this is only for prod then dont install the npm install or dev install the npm install
	- in the Dockerfile 
		- RUN npm install --only=production
	- this will prevents any dev dependency get installed on the prod
	- if we check in package.json nodemon is dev dependency not the prod dependency
	- so we put 
		RUN npm install --only=production
	- then it will not install the npm install becoz this is dev dependency not prod dependency
	- so we need to change the Dockerfile
======================================================================
		vi Dockerfile
			- FROM node:15
			  WORKDIR /app
			  COPY package.json .
			  ARG NODE_ENV
			  RUN if [ "$NODE_ENV" = "development" ]; \
			           then npm install ; \
					   else npm install --only=production; \
                  fi
              COPY . ./
              ENV PORT 3000
			  EXPOSE $PORT
			  CMD ["npm" ,"run" ,"dev"]
======================================================================
- we need to set the value of NODE_ENV value in the docker-compose.dev.yml and docker-compose.prod.yml 
======================================================================
- vi docker-compose.dev.yml
	- version: "3"
	  services:
	    node_app:
		  build:
		    context: . #(specify Dockerfile)
			args: # all the diff arguments we want to pass
			  NODE_ENV: development
		  volumes:
			- ./:/app
			- /app/node_modules
		  environment:
			- NODE_ENV=development
		  command: npm run dev
======================================================================
======================================================================			  
-vi docker-compose.prod.yml
	- version: "3"
	  services:
	    node_app:
		  build:
		    context: .
			args: 
			  NODE_ENV: production
			environment:
				- NODE_ENV=production
			command: node index.js
======================================================================
	-docker ps -a			  
	-docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v
	-docker ps -a
	- docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build
	- change index.js file
	- check
	- docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
	- bring back up for the prod
	- docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build
	- change index.js
	- no update
	- docker  exec  -it node_app bash
	- ls
	- cd node_modules
	- check for the nodemon (we dont find it )
	$ ls -al
	$ printenv
====================================================================================================================
	- ADDING MONGO DB TO APPLICATION
		- go to dockerhub check for mongo
		- vi docker-compose.yml
===========================================
	version:"3"
    services:
		node_app:
		  build: .
		  ports:
		    - "3000:3000"
		volumes:
		  - ./:/app
		  - /app/node_modules
		environment:
		  -PORT: 3000
		# env_file:
		#  - ./.env
	    # this should lined with node_app
		mongo: # we call what ever we want 
		  image: mongo
		  environment:
			- MONGO_INITDB_ROOT_USERNAME=samantha
			- MONGO_INITDB_ROOT_PASSWORD=samantha123
===========================================
 $ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d 
 $ docker ps -a
 - we will see the two containers
 - mongo container and node_app container
 $ docker exec -it <name of the container> bash
 $ mongo -u "samantha" -p "samantha123"
 > db
   test
 > use <new db>
 > use mydb
 switched to new db
 > show dbs
 > db.books.insert ({"name": "Harry Potter"}) # new db creation with name books
 > db.books.find()
 > show dbs
 exit
 $ docker exec -it <name of the container> mongo -u "samantha" -p "samantha123" (we will directly go to the mongo db connection)
 $ exit
 $ docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
 - boot up the db again 
 $ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
 $ docker exec -it <name of the container> mongo -u "samantha" -p "samantha123"
 > show dbs
 - the db we created mydb is gone
 - this is a brand new container so every thing is new 
 - no data should be lost in container especially prod environment
 - in the docker-compose.yml
	$ vi docker-compose.yml
	  version: "3"
	  services:
	    node_app:
		  build: .
		  ports:
		    - "3000:3000"
		  environment:
		    - PORT=3000
		mongo:
			image: mongo
			environment:
			  - MONGO_INITDB_ROOT_USERNAME=samantha
			  - MONGO_INITDB_ROOT_PASSWORD=samantha123
			volumes:
			# /data/db this is annonomos volume we should name it
			# - name: /path
			  - mongo_db:/data/db #(no space)
		volumes:
			# list all the named volumes here
			mongo_db:

- named volumes needs a declaration we need to declare the volume mongo_db in another protion of this docker-compose.yml file
- named volumes can be used by multiple services
- if we have a another mongo instance or another mongo services they can attach to this mongo_db volume like this services does
	$ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
	$ docker exec -it <container> bash
	> use mydb
	> db.books.insert({"name": "harry potter"})
	> db.books.find()
	exit
	$ docker-compose -f docker-compose.yml -f docker-compose.dev.yml down (-v deletes ananmous volumes and named volumes also)
	$ docker volume ls
	$ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
	$ docker exec -it <container> bash
	> showdbs
	> use mydb
	> db.books.find()
=========================================================================================================		
- CHECK FOR PERSISTANCE VOLUMES OR NFS	 (check)
	- CHANGES TO EXPRESS APPLICATION TO MONGO DB
		$ docker-compose up -d --build
		- need to check in the https://www.npmjs.com/package
		- search for mongoose
		$ sudo npm install mongoose
		$ docker-compose down 
		$ docker-compose up -d --build
		- now we import mongoose
		- in the package.json file 
		- paste under cons express
		$ const mongoose = require('mongoose');
		- now we have to connect to db
		- Connecting to MongoDB
		- Connections
		- You can connect to MongoDB with the mongoose.connect() method.
		- You can also specify several more parameters in the uri:
		$ mongoose.connect('mongodb://username:password@host:port/database?options...', {useNewUrlParser: true});
		- under package.json
			- mongoose.connect("mongodb://samantha:samantha123@ipaddress")
		$ docker inspect <name of the mongodb container> | grep -i ipaddress
		
		- every time the ipaddress may vary 
		- for that we need to look into
		$ docker ps -a
		$ docker inspect <name of the container>
			- mongoose.connect("mongo://samantha:samantha123@172.x.x.x:27017/?authSource=admin").then((
			)=> console.log("successfully connected to DB")).catch((e)=>console.log(e));
		$ docker ps 
		$ docker logs <name of the node container>
===========================================
vi index.js

const express = require("express")
cons mongoose = re
const app = express()
app.get("/",(req,res) => {
    res.send("<h1> Doing this on sunday </h1>");
})
const port = process.env.PORT || 3000;
app.listen(port,() => console.log(`listening on the the port ${port}`));



		
		
	
	
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
		
		
		






















