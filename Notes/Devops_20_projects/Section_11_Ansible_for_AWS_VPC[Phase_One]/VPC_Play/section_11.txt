078 c. Warm Up for AWS Cloud Playbooks

mkdir vpc-stack
cd vpc-stack
google search module index
    - cloud modules
- ec2_key module
vi test_aws_key.yml
--------------------
- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: sample ec2_key
      ec2_key:
        name: sample
        region: us-east-2
      register: keyout
    
    - debug:
        var: keyout
    - name: store login key
      copy:
        content: "{{ keyout.key.private_key}}"
        dest: ./sample-key.pem
      when: keyout.changed

----------------
- sudo apt search boto
- sudo apt update
- sudo apt install python3-boto3 python3-botocore -y
- $ ansible-playbook  test_aws_key.yml

************************************************************************************
079 d. Variables for VPC
    - just create a vpc_setup a variable file
    - vi vpc_setup
____________________________________________________________
vpc_name: "samantha-vpc"
# vpc range
vpcCidr: '172.10.0.0/16'

# Subnet ranges
PubSub1Cidr: 172.10.1.0/24
PubSub2Cidr: 172.10.2.0/24
PubSub3Cidr: 172.10.3.0/24
PrivSub1Cidr: 172.10.4.0/24
PrivSub2Cidr: 172.10.5.0/24
PrivSub3Cidr: 172.10.6.0/24

# Region name
region: "us-east-2"

# Zones Names
zone1: us-east-2a
zone2: us-east-2b
zone3: us-east-2c

state: present
____________________________________________________________
 now create baston_setup file
 vi baston_setup
--------------------------------------
# for bastion host we need secure ami (cis) these are charges
# this is the single point of entry from the public n/w
# go with free like amazon linux 2

bastion_ami: {ami id for amazon linux 2}
region: us-east-2
MYIP: 0.0.0.0/0
************************************************************************************
080 e. VPC Play && 081 f. Subnets Play && 082 g. Internet Gateway & Route Table

vi vpc-setup.yml
----------------------------------------
- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import vpc variables
      include_vars: vpc-setup
    - name: Create vprofile vpc
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: "{{state}}"
      register: vpcout
    - debug:
        var: vpcout
    
    - name: create Public Subnet1 in Zone 1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PubSub1Cidr}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        map_public: yes
        tags:
          Name: samantha-pub-sub1
      register: samantha_pubsub1_out
    - debug:
        var: samantha_pubsub1_out
    - name: create public subnet2 in zone 2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PubSub2Cidr}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        map_public: yes
        tags:
          Name: samantha-pub-sub2
      register: sam_pub2_out
    - debug:
        var: sam_pub2_out
    - name: create public subnet3 in zone 3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PubSub3Cidr}}"
        region: "{{region}}"
        az: "{{zone3}}"
        state: "{{state}}"
        map_public: yes
        tags:
          Name: samantha-pub-sub3
      register: sam_pub3_out
    - debug:
        var: sam_pub3_out
    - name: create private subnet1 in zone 1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PrivSub1Cidr}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        tags:
          Name: samantha-priv-sub1
      register: sam_priv1_out
    - debug:
        var: sam_priv1_out
    - name: create private subnet2 in zone 2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PrivSub2Cidr}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        tags:
          Name: samantha-priv-sub2
      register: sam_priv2_out
    - debug:
        var: sam_priv2_out
    - name: create private subnet3 in zone 3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PrivSub3Cidr}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        tags:
          Name: samantha-priv-sub3
      register: sam_priv3_out
    - debug:
        var: sam_priv3_out
    - name: Internet Gateway setup
      ec2_vpc_igw:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        resource_tags:
          Name: samantha_IGW
      register: igw_out
    - name: Set Up Public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: samantha_PUBRT
        subnets:
          - "{{samantha_pubsub1_out.subnet.id}}"
          - "{{sam_pub2_out.subnet.id}}"
          - "{{sam_pub3_out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igw_out.gateway_id}}"
      register: PubRT_out
--------------------------------------------
____________________________________________________________
083 h. Nat Gateway & Route Table
- now we should have nat Gateway
- now we have to focus on the private subnet
- route table for the nat Gateway
- nat Gateway lives in the public subnet
- nat Gateway is not free
- delete the nat Gateway
- release the Elastic IP
vi nat_Gateway.yml
********************************************
- name: Create new NAT Gateway and allocate new EIP 
  ec2_vpc_nat_gateway:
    state: "{{state}}"
    subnet_id: "{{samantha_pubsub1_out.subnet.id}}"
    wait: yes
    region: "{{region}}"
    if_exists_do_not_create: true
  register: Natgw_out
- name: Set Up the private subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{vpcout.vpc.id}}"
    region: "{{region}}"
    tags:
      Name: Sam_PrivRT
    subnets:
      - "{{sam_priv1_out.subnet.id}}"
      - "{{sam_priv2_out.subnet.id}}"
      - "{{sam_priv3_out.subnet.id}}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{Natgw_out.nat_gateway.id}}"
  register: PrivRT_out
  


