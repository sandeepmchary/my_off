a) Introduction:
	- About the project
		- multi tier web application stack [vprofile]
		- Re-Architect Services for aws cloud
		- Architecture to boost agility or imporve business continuity
		- Paas & Saas
		- cloud managed services from aws services
		- IAAC - Infrastruture as Code
		- Flexible
		- Automation
		- Aws services (front end)
			- Bean stack 
				- vm for tomcat (app server)
				- Nginx LB replacement
				- Autoscaling for vm scaling
			- s3/efs - storage
		- Aws Services (Backend) (Paas)
			- RDS instances - DB
			- Elastic cache - memcache
			- Active MQ - Rabbit MQ
			- Route 53 	- DNS
			- Cloud Front - content delivery n/w
	- Comparision
	
	Bean Stack         --- Tomcat Ec2 
	ELB in Bean Stack  --- Nginx lb/elb
	Autoscaling        --- Autoscaling
	EFS/S3			   --- NFS/S3/EFS
	RDS				   --- 	MYsql on vm
	Elastic cache      --- memcache on vm
	Active MQ          --- Rabbit MQ
	Route 53 	       --- DNS
	Cloud Front        --- multi DC across world
    - Architecture of AWS of this project
		- Ec2 instances
		- ELB
		- Autoscaling
		- EFS/S3
		- RDS
		- Elastic cache
		- Active MQ
		- Route 53
		- Cloud Front
	users > url > resolved to end point route 53 > endpoint will be of amazon cloud front(content delivery n/w) (this will cache so many things) > redirected to application lb (which is part of elstic beanstalk) > ec2 instances(tomcat app will be running) in auto scaling group (all these are in part of elastic beanstalk) >
	there will be also amazon cloud watch (for monitoring) > s3 bucket (to store artifacts) (entire frontend managed by beanstalk) > beanstalk to amazon MQ > elastic cache service > amazon rds
	-------------
	FLOW OF EXECUTION
		- loging to aws account
		- create key pair for beanstalk instances login
		- create security group for elastic cache,RDS & Active MQ
		- create
			- RDS
			- amazon elastic cache
			- amazon active MQ
		- create elastic beanstalk environment
		- update SG of backend to allow traffic from bean SG
		- update SG of backend to allow internal traffic
		- launch ec2 instances for DB initializing
		- login to the instance and initialize RDS DB
		- Change healthcheck  on beanstalk to /login
		- Add 443 https listner to ELB
		- Build artifact with backend information
		- Deploy artifact to beanstalk
		- Create CDN with ssl cert
		- Update entry in Godaddy DNS zones
********************************************************************************************************************
24_b_security_groups
	- create a keypair (name: vprofile-bean-key)
	- pem
	- security group for all backend services
		- create security group
		- name it (vprofile-backend-SG)
		Inbound rules:
			- create a dummy  one
			- all the backend services we are going to use elastic cache,rds,active MQ will be created in a private n/w we cannot access from our public n/w from the public IP 
		Add Rule
			- all traffic : Source (myIp)
				- save rules
		- select the security group > actions > edit
				- change (- all traffic : Source (myIp))
			- all traffic: source (vprofile-backed-SG)
	
********************************************************************************************************************
25_c_RDS
	- RDS
		- go to subnet groups
			- place the RDS in this subnet group
			- create DB subnet group
			- name it (vprofile-rds-sub-group)
			- select the VPC (select it)
			- Avaliability zones (select all)
			- subnets (select all)
			- create
		- Parameters group
			- if we want special parameters (used for performance tunning)
			- create parameter group
			- select db engine (mysql 5.6)
			- Group Name: (vprofile-rds-para-group)
			- create
		- create RDS instance
			- databases
			- create database
			- standard create
			- mysql
			- version: 5.6.34
			- templates: Dev/Test (for creating a single instance itself)
			- settings:
				- name it : vprofile-rds-mysql
				- Master username: admin
				- Auto generate
			- DB instance size:
				- Burstable classes (include t series)
				- db.t2.micro (BUT IN PRODUCTION TRY WITH R OR M SERIES,R SERIES ARE THE BEST FOR PRODUCTION DB)
				- General Purpose ssd (FOR PRODUCTION PROVISIONED IOPS)
			- Storage autoscaling
				- 20 - 1000 gb
			- Avaliability & Durability
				- single instance
			- vpc 
				- default
			- Additional connectivity configuration
				- subnet group: vprofile-rds-sub-group
			- Public access
				- NO
			- Security group
				vprofile-backend-SG (we already create)
			- Database authentication	
				Password authentication
			- Additional configuration
				intial db name
					accounts
				DB parameters group (it's not showing)
					vprofile-rds-para-group
			- Backup
				7 days
			- cp tags to snapshots
			- monitoring
				- disable
			- logs
				- all
			- Maintanence
				- enable
			- Delete protection
				- enable
			- create db
			- copy all the content
********************************************************************************************************************
26_d_ElastiCache
	- elasticache
		- parameters group
			- create parameter group
			- Family: memcache 1.4
			  Name: vprofile-memcached-para-group
			  Description: same
		- Subnet group
			- create subnet group
				- Name: vprofile-memcache-sub-group
				  Description: same
				  VPC ID: select it
				  Availability Zone: select it
				  subnet : 
				Add
			     zones
				 subnets
				- select all
			 create
		- memcached
			- create
			-  Cluster engine: memcached
				 name: samantha-elasticcache-service
				 engine: 1.4.5
				parameter group:  vprofile-memcached-para-group
				node type: t2.micro
				no of nodes: 1
			- Advanced memcached settings
				- subnet group: vprofile-memcache-sub-group
				  zones: no preference
				  sg: vprofile-backend-SG(uncheck the default)
			- maintance
				maintance window
					no preference
			- topic for sns notification	
			- create
********************************************************************************************************************27_e)
	- Amazon MQ (managed message broker)
		- create brokers
		- Apache ActiveMQ
		- single-instance-broker
		- if we need high avaliability we go with ACTIVE/STANDBY BROKER
		- Storage:
			-Durability Optimized (backed by EFS)
			- if we want to backed by EBS use Throughput optimization,cannot be used in cluster
		- next
		- Broker name: vprofile-rmq
		- Broker instance type: mq.t2.micro
		ActiveMq Access:
			- simple Authentication and Autherization
			- username: rabbit
			- passwd
		- Additional settings
			- broker engine version: 5.15.12
			configuration
				with default values
			- logs:
				- general
				- audit
			- N/w and security
				- use default vpn and subnet
				- security group: vprofile-backend-SG(this is created at starting of the security group)
			- Encryprtion
				- default
			- public accessibility
				no
			- maintance
				maintance window: no preference
			- Tags:
				Name: vprofile-rmq01
				project: vprofile
		- create broker
		- takes very long time and deleting also takes very long time
		- all these info in our application.properties file
********************************************************************************************************************
28_f_DB_intialization		
	- initialize RDS db
	- for this we launch an ec2 instance we login to this RDS,copy the endpoint 
	- ubuntu 18
	- it should be in the same VPC if not we cannot login to RDS
	- name: mysql-client
	- create sg 
		- name: mysql-sg
		  ssh: 22
	- use key: vprofile-bean-key
	- login to ubuntu
	$ sudo apt get update
	$ sudo apt install mysql-client -y
	$ sam-rds-mysql.cxdhqisxknvi.us-east-1.rds.amazonaws.com
	$ admin
	$ DeepSan9704
	- now we have to edit the vprofile-backend-sg 
	- allow traffic 3306 from the mysql-sg
	$ mysql -h (endpoint here) -u admin -p<paste from the RDS>
	- we get error
	- add the mysql port in sg
	$ mysql -h (endpoint here) -u admin -p<paste from the RDS>
	$ show database;
	$ git clone <url>
	$ cd vprofile-profile
	$ git branch -a
	$ git checkout aws-Refacor
	$ cd src/main/resources/
	- we need db_backup.sql
	$ mysql -h (endpoint here) -u admin -p<paste from the RDS> accounts < db_backup.sql
	$ mysql -h (endpoint here) -u admin -p<paste from the RDS> accounts
	$ mysql > show database;
	$ show tables
	-- RDS is initialized
********************************************************************************************************************
29_g)
	- Checking backend service
	- check the memcache -- configuration endpoint:  sam-elasticache-service.3h48se.0001.use1.cache.amazonaws.com
	- check amazon MQ -- endpoint: connections: AMQP: only
	            amqp+ssl://b-c72ebbba-b6c1-476a-8ab5-d661e9e5ad99-1.mq.us-east-1.amazonaws.com:5671
	- Terminate the mysql ubuntu instance
	- BEANSTALK
		- this is where we should our app 
		- artifact will be uploaded on the beanstalk
		- create app
		- app name : vprofile
		- tags:
			key: project: vprofile-java-app
		- Platform
			tomcat
		- platform branch
			tomcat 8.5 (our java-app will work on tomcat8 )
		- Application Code
			sample app
		- Configure more
			instances
				- EDIT
				- security group vprofile-backed-SG	
			- Root volume
				root volume type
					general
				size
					 8
		SAVE
		    -----------
			capacity
				edit
					- we will have multiple instance
					- select load balancer (it will create elastic lb)
						instance
							min: 2
							max: 8
						instance type
							t2.micro
						AMI ID: 
							keep the default
							- check for how build ami for beanstalk
						Availability zones:
							- any
						Scaling trigger:
							metric:
								- n/w out (for web app mostly popular)
							keep default
						SAVE
			-----------			
		    Load balancer
				edit
					application load balancer
			    keep default
			-----------	
			Roaling updates and deployments
				- Deployment policy
					Rolling
				- we have two instances to begin with one instance will be upgraded at a time
				Batch size:
					50% (50% percent of two instances i.e., one instance at a time)
					25%( is good for productions for this we need to have 4 instances)
				Keep default
			SAVE
			-----------
			Security
				- select the key pair
			SAVE
			-----------
			Monitoring
				system
					enhanced
				health event streaming to cloudwatch logs
					log streaming
				Lifecycle
					delete logs upon termination
			SAVE
			-----------
			Tags:
				project: vprofile-app
			SAVE
			- we can use DB here in beanstalk but its not recommended on production
			
			
			--- CREATE APP (IT WILL TAKE SOME TIME)
			- we get vprofile-app-env
			- we get endpoint url 
			- a default app will be running
				
	        -----------------------------------------------
			in the security groups
				- rename the beanstalk load balancer (vprofile-env-elb) (check for the security group name)
				- rename the beanstalk instance (vprofile-env-inst)(check for the security group name
				- copy the vprofile-env-inst id 
				- go to vprofile-backed-SG 
				- inbound rule
				- edit
				- mysql custom vprofile-env-inst-sg name
				- custom tcp: 11211	custom vprofile-env-inst-sg-name
				- custom tcp : 5671 custom vprofile-env-inst-sg-name
			- save rules
			------- 
			- we need to change the load balancer https
			- go to beanstalk environment
			- configuration
			- go to load balancer
			- edit
			- add listener
				443
				https
				ssl cert: (from the acm)(click refresh)
			Add
			- healthcheck
				action
					path
						/login
				save
			APPLY
********************************************************************************************************************30_h)
	- Build and Deploy
		- git branch -a
		- git checkout aws-Refactor
		- maven and jdk should be installed on the local machine
		- change the application.properties file
		$ cd src/main/resources/
**********************************************************************
		$ vi application.properties
			jdbc.url: at the place of mysql://db01
					  mysql://RDS endpoint
			jdbc username: admin
			jdbc passwd: (we have generated automatically)(paste here)
			
			
			memcached.active.host=(memcache endpoint)(no port number)
			
			rabbitmq.address=(rmq endpoint)(no port number)
			rabbitmq.username=rabbit
			rabbitmq.password=(copy the auto generated passwd)
			
			:wq!

**********************************************************************
	$ cd /vprofile-project
	$ mvn install
	$ in the aws-Refactor branch only
	$ cd target
	-------------
	- go to elastic beanstalk
	- Application version
		- upload
		- version name: vprofile-v2.5
		- choose file (repo/target/vprofile-v2.war)
	- select the version 
	- action 
	- Deploy
	- select the environment
	- deploy
	- go to environment section
	- see the events
	- we have to wait for some time
	- click on the endpoint
	- go to Domain vendor page
	- ADD record
		Cname: vprofile(host): (paste the end point)(points to )
	SAVE
	- URL : https://vprofile.awssandeepchary.xyz
	- before login 
	- we need to enable stickyness for lb
	- configuration
	- select LB
	- processess
	- select
	- actions
	- edit
	- scroll down
	- stickyness policy enabled
	SAVE
	- apply
	- it will take some time
------------------------------------------------------------------------
	- verified beanstalk RDS,memcache,activemq
	- now the site is setting in N.virginia 
	- i have global audience
	- to serve the global audience content delivery is used 
	- very expensive
	- we can use cloudfront content delivery n/w
********************************************************************************************************************
31-i)
	Amazon cloudfront
		- create distribution
			- (web)get started
			- Origin Domain name: samantha.awssandeepchary.xyz
			- no path for orgigin
			- origin protocol policy: match viewer
		- default cache behaviour settings
			- viewer protocol policy
				HTTP and https
			- Allowed http methods
				- get head options put post patch delete	
			- Distribution
				- price class : all locations
				-	Alternate domain: Samantha.awssandeepchary.xyz
			- SSl certificate:
				Custom ssl certificate
					choose the ssl form acm
			- security policy
				TLSV1
		- Create Distribution
		- it will take time upto 30 min
********************************************************************************************************************32-j)
	- validate and summerize
		- now the status says deployed
		- now the state says enabled
		- the user will not know the request is coming from cloudfront or load balancer
		- inspect element from our browser
		- bring in firefox
		- paste the URL
		- f12
		- refresh the browser once again
		- can we see the via: nearest distribution over there
		- disable the distribution
		- delete RDS
			- 

			
		
		
				