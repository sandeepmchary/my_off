33-a) Introduction
	- Scenario
		- current situation
			- AGILE SDLC
				- Developers make regular code changes
				- These commits need to be build & Tested
				- Ususally build and release team will do this job
				- Or developers responsibility to merge and integrate code
				
	- Problem
		- in AGILE SDLC there will be frequent code changes
		- Not so frequently code will be tested
		- which accumulates bugs and error in the code
		- Developers needs to rework to fix these issues
		- Manual Build & release process
		- Inter Team dependencies
	
	- Solution
		- Build Test for every commit
		- Automated process
		- Notify every build status
		- fix the code with the errors found
		
	- Continous Intergration Process:
		- CI Pipeline
			- AGILE
			- No Human Intervention
			- Shorter Mean time to repair
			
		
	- Tools:
		- Jenkins
		- git
		- maven
		- checkstyle
		- slack
		- Sonatype Nexus
		- Sonarqube
		- Aws EC2 
	
	- FLOW OF EXECUTION
		- login
		- keypair
		- Create SG
			- jenkins
			- Nexus
			- Sonarqube
		- create EC2 instances with userdata
			- Jenkins
			- Sonarqube
			- Nexus
		- Jenkins post installation
		- Nexus repo setup
		- Sonarqube post installation
		- jenkins setup
			- Build jobs
			- Setup slack notification
			- checkstyle code analysis job
			- Setup sonarqube Intergration
			- Sonarqube code analysis job
			- Artifact upload job
		- Connect all jobs with pipeline
		- set automatic build trigger
		- Test with intellij
		- cleanup
********************************************************************************************************************
34_b)
	- Security_groups_key_pairs
		- crate key pair
			- name: sam-jenkins
			- pem: check
	
	- Security_Group
		- three Security_Groups neeeded 
			- jenkins :8080,22 (ports)
			- sonarqube: 22,80(ACTUALLY Sonarqube WORKS ON 9000,WE USE NGINX THIS WILL REDIRECT TO SONARQUBE 9000)
				Add: 80 (from jenkins Security_Group)(to upload the jenkins artifacts to sonarqube server)
			- nexus :8081,22 (ports)
				Add: 8081 (from jenkins Security_Group)
			- reason for this is jenkins can upload artifacts to nexus	
			
			- again in jenkins_sg
				Add : All traffic ;custom(sonarqube Security_Group)(Allow sonaq to access jenkins for quality gates result)
		
		- create rule
	- retag it with the sg name
********************************************************************************************************************
35_C_Ec2-User_Data_scripts:
	
	- git clone https://github.com/devopshydclub/vprofile-project.git
	- git checkout ci-jenkins
	$ ls
	$ jenkins (ubuntu-machine)
	$ nexus (centos-7))
	$ sonarqube (ubuntu-machine)
********************************************************************************************************************
36_d) setup nexus sonarqube servers:
	
	- from the git we get the shell scripts for that 
	- we need 3 ec2 and copy the userdata on the respective ec2
	- select the jenkins security group
	- nexus is on centos 7 and remaining 2 r in ubuntu-machine (t2.medium)
	- sonarqube (t2.medium)
	- install jenkins
		_ NEXUS:
			
			- now to go to nexu server
			- ssh to nexus find the file 
			- enable 
			- enable annoumous action (if we disable it then we have to authenticate it with username and password for every tool this is recommended way)
			- go to repository 
			- create 3 repository
			- maven2(hosted) - 
				- here we upload the artifact
				- Name: samantha-release
				  online: check
				- create repository
	        - maven2(proxy): to store the maven dependency,build tool download the dependencies from here
				- name: samantha-maven-central
				  proxy:
					Remote storage:
						check for eg: 
					- The dependencies will be download from the eg: url and stored in the samantha-maven-central(repo)
			- create repository
			
			- maven2(group):
				- here we group above both repositories
				group:
					Member repositories
				- name: samantha-maven-group
					- select repositories
						- samantha-maven-central
						- samantha-release
			- create repository
			
			
			- maven(hosted) (IF WE WANT TO CHANGE THE RELEASE TO SNAPSHOT)
				- ALL SAME 
				- NAME: samantha-snapshot
				- CHANGE THE VERSION TO 
					- SNAPSHOT
			- create repository
			
			- maven(group):
				add the 
				group:
					Member repositories
						samantha-snapshot
			- save
		    - we dont use this snapshot
			
			- go to repositories
				- samantha-maven-central
					- 
			- now we have to change the settings.xml in the source code 
			- in the settings.xml under the id of the repository snap-repo,release-repo are variable we have to pass the value 
			- in the pom.xml file we have repositories information at the end
********************************************************************************************************************
37-E)
	- Build,Nexus,Intergration job
		- with the source code create a file for all the variables only 
			- SNAP-REPO=samantha-snapshot
			  NEXUS-USER=admin
			  NEXUS-PASS=admin123
			  RELEASE-REPO=samantha-release
			  CENTRAL-REPO=samantha-maven-central
			  NEXUS-GRP-REPO=samantha-maven-group
			  NEXUSIP=privateIP
			  NEXUSPORT=8081
			  
			  
			  
			  
		- under jenkins server
		- go to free style project (build)
		- source code
			- Git
				- Repo URL: https://github.com/devopshydclub/vprofile-project.git
			- Branch to build:
				- */ci-jenkins
			- Build	
				- Invoke toplevel maven target
					- Goals: install -DskipTests(this will skip the tests)
					- Advanced
						properties:
	    						SNAP-REPO=samantha-snapshot
     						  NEXUS-USER=admin
							  NEXUS-PASS=admin123
							  RELEASE-REPO=samantha-release
							  CENTRAL-REPO=samantha-maven-central
							  NEXUS-GRP-REPO=samantha-maven-group
							  NEXUSIP=privateIP
							  NEXUSPORT=8081
		     		- this will use the pom.xml which is already in the source code
						- Properties: 
						- setting file: settings file in the file system
							file path: settings.xml
					- SAVE
					- build now
					- check the log 
					- it should run all the parameters we passed in the mave
					- under the NEXUS - browse(box type) - under the samantha-maven-central (we can see the artifacts stored here)
					- under samantha-maven-group
					
********************************************************************************************************************38_f_slack_integration)
			- now the  build is success 
			- now the developers should know this 
			- with slack developers get the notification
			- whether the build is success or fail
			- go slack.com
			-  create account
			-  select/create the workspace
			-  samantha-devops
			-  general
			-  channel
			- create channel
			- jenkins(name it)
			
			- create a bot (api.slack.com)
			- start building
			- create an app
			- name it(jenkins)
			- select the workspace
			- oath&permission
			- add an oauth space
			- chat:write
			- install app to workspace
			- allow
			- copy the token
			- go to channel
			- at the chat
			- @jenkins(app name)
			- invite to channel
		
		- under the jenkins
			- manage jenkins
					- plugins
					- available
					- (slack)
					- slack notification
					- install with out restart
			- credentials
				- manage jenkins
				- manage credentials
				- jenkins
				- global credentials
				- add credentials
				- kind: secret text
				- secret : paste it
				- ID: slack token
				- OK
			- Integrate
				- manage jenkins
				- configure system
				- look for slack setting
				- custom slack bot user (check it )
				- save
				- go to the job
				- configure
				- (send the notification)
				- post build actions
				- slack notification
				- check all
				- Advanced
				- Upload build artifact
				- workspace(name it)
				- credentials
				- slack-token
				- channel/member id (jenkins)
				- Test Connection
			- post build action
			- archive the artifact (**/*.war)
			- SAVE
			- build now
********************************************************************************************************************39_g_Test_Code_analysis_sonarqube
	- under jenkins
	- free style project 
	- Test(name)
	- copy from Build job
	- Goals: test
	- don't archive the artifact here
	- save
	- build now
	- NOW WE HAVE TWO JOBS
		- NOW INTEGRATE THE JOBS 
			- after the build job is completed then we run the test job
			- go to build job
					- configure
					- post build action
					- build other projects
					- (projects to build)
					- Test(,)
			- save
			- if we refresh it we can see the down stream project is "Test"
		- for integration test, we can run one more job for integration 
			- integration Test
			-free style
			- copy from (Test)
			- (build) verify -DskipUnitTests
			- SAVE
			- now integrate with test job with integration job
			- go to test job 
						- configure
						- build other project
						- integration test
						- SAVE
			- build now
			- refresh
			- now the upstream is "build" and downstream is "Intergration Test"
			- now we have 3 jobs connected to together
	- CODE ANALYSIS:
		simple code analysis with check style 
			- manage jenkins 
			- plugins 
			- available 
			- check style (search),violations 
			- install without restart

		- create a 
			- new job 
			- code-analysis(name it) 
			- free style 
			- copy from (build)

		- Goals:
			- checkstyle:checkstyle
		- no archiving
		- SAVE
		- build now 
		- look for checkstyle-result.xml under the workspace/target 
		- here we have around 96 warnings
		- if we want to check 
		- configure branch 
		- */vp-rem
		- (this branch does not have settings.xml file )
		- Build (advanced)
		- setting files
		- use default maven settings
		- file settings (remove it)
		- save
		- build
		
		- in this branch we have more warnings/errors but still running
		- what if we dont want to tolerate if the errors are more than 100 
		- then we use violations plugins
		- checkstyle-result.xml is the file setting the violations
		- go to code-analysis
				- post build actions
				- report violations
				- checkstyle and other patterns are available
				- checkstyle
				- (give the file name) target/checkstyle-result.xml
				- SAVE
		- now change the branch name to 
			- ci-jenkins
			- Build
			- Advanced
			- setting file : setting file in filesystem			
			file path : setting.xml - SAVE 
			
		- this job will pass becoz ci-jenkins has less than 100 warnings 
		- the build is success
		- go to - integration test
				- configure
				- Add post build actions
				- build another job
				- projects to build : code-analysis
				- SAVE
		- BUILD - TEST - INTEGRATION TEST - CODE-ANALYSIS( THIS IS THE SEQUENCE)
		
	SONAR-SCANNER-CODE-ANALYSIS:
	
		- we do one more code analysis with sonarqube scanner and publish that code to sonarqube scanner and checkstyle to sonarqube server dashboard
		- sonarqube server up and running
		- integrate b/w sonaq and jenkins 
		- sonarqube
		- login
		- admin
		- security 
		- Generate Token (sonartoken)
		- Generate
		- copy the token - 
	

	- go to jenkins
	- manage jenkins
	- plugins
	- search for (sonar) - check (sonarqube scanner & sonar quality gates)
	- install with restart 
		- global tool configuration
		- sonarqube scanner
		- add sonarqube scanner
		- Name: sonar:4.4.2170
		- install from select the version
		- SAVE
		
		- configure system
		- sonarqube servers
		- check (enable injections)
		- Add sonarqube
			- Name: sonar-sam
			- server url : http://(private ip of sonarqube)
			- server authentication token (add)
			- jenkins - kind: secret text
			- secret: paste the token we copied from the sonarqube
			- add
		- quality gates
		- sonarqube - name : sonar-sam
		- url : http://(privateIP of sonarqube)
		- authenticate: (paste the token we copied from the sonarqube)
        - SAVE
		
		- new item
		- SONAR-SCANNER-CODE-ANALYSIS(name of free sytle project)
			- copy from : Build
			- Build
			- Goals: install
			- (no archive artifact)
			- Add build step
			- execute sonarqube scanner
			(here we have analysis properties it is used for what project is used on the sonarqube server,source code to scan,surefire reports,check style analysis result)(in our source code we have source analysis properties it has only project key,project name,project version,sources,java.binaries,jacoco reportsPath,checkstyle.reports.path)
		- paste the content of source analysis properties in the analysis properties
		- Add build step
		- invoke toplevel maven targets
		- checkstyle:checkstyle
		- SAVE
		- build now
		- go to sonarqube server
		- projects
		- check the project
		- for testing we can change the branch to
		- configure
		- branches to build
		- (*/vp-rem)
		- remove setting.xml from
		-Build
		- Advanced section
		- use default maven settings
		- save
		- buildnow
		- in the sonarqube server
		- project - (the bugs will increase)
		- quality gate
		- create
		- Name: sam-quality-gates
		- save 
			- Add condition
			- on overall code
			- bugs
			- value
			- 50
			- add condition
		- select the project
		- quality-gates
		- sam-quality-gates 
		-- go to jenkins(to validate the quality-gates)
		- configure(sonarscanner-code-analysis)
		- add post build actions
		- quality-gates sonarqube plugins
		- project key: (same as in the source analysis properties)
		- job status when the analysis fails (failed) 
		- SAVE
		- buildnow
		- it will fail
		- check the logs
		- quality-gates plugin passed : false
********************************************************************************************************************
40_h_nexus_repo_integration
	- uploading artifact to nexus to server
	- artifact are in Build job/Workspace/target/vprofile-v2.war(change the version then upload to nexus)
	- nexus artifact uploader,copy artifact,zentimestamp (plugin install)
	- new item (Deploy_to_nexus)
	- Build - Add Build step
	- copy artifact from another project
	- project name: build
	- artifacts to copy : **/*.war 
	- Add build step
		- Nexus artifact uploader
		- Nexus version: NEXUS3
		- NEXUS url: <privateip of nexus:8081
		-- credentials
		- Add
		- jenkins
		- kind: username & passwd
		- username : xxxxxx - Passwd : xxxxx
		- Group id : QA
		- version: V$BUILD_ID
		- repository: samantha-release
		- Artifact
		- Add
		- Artifactid: $BUILD_TIMESTAMP
		- Type:war
		-file: target/vprofile-v2.war 
		
	- post build action
	- slack notification
	- select all
	- advanced
	- workspace : jenkins
	- credentials:slack-token
	- channel : # jenkins
	- test connection
	- save
	- buildnow
		- under general
		- change the date pattern
		- date & time patterns : yy-MM-dd_HH-mm
	- go to samantha-release we find the war files
    - to go sonar-scanner-code-analysis
	- post build actions
	- build other projects
	- projects to build: Deploy_to_nexus	
********************************************************************************************************************
41_i_validate&pipeline
	- build pipeline (install plugin)
	- go to dashboard on jenkins
	- we find all the jobs
	- click on the + symbol
	- view name: vprofile-CI
	- build pipeline view - ok
	- Pipeline FLOW
		- Upstream/downstream config
			- Select intial job : Build
	- Display Options
		-  no of display builds : 5
		- OK
	- Run
	- go to nexus we get new version artifact here 
	- stop all the instances
		
********************************************************************************************************************
42_j_Data_Backup
	- Data backup of CI/CD stack
		- Create a S3 Bucket
		- Create an IAM role with S3 bucket
		- Attach role to all instances
		- login into jenkis	 instances
		- shutdown jenkins service
		- Clean up unneccessary data
		- Archive /var/lib/jenkins
		- Install aws cli
		- Copy jenkins archive to S3 bucket
		- Login into nexus server
		- Shutdown Nexus services
		- Archive /opt/nexus dir
		- install aws & configure
		- copy nexus archive to same s3 bucket
		- login to sonar server
		- shutdown sonar service
		- Archive /opt/sonarqube dir
		- Archive /var/lib/postgresql 
		- archive to same s3 bucket
		- Note down names of 
			* S3 bucket
			* Archive file names
	
	- if we delete the jenkins instance, without taking backup all the jobs,builds,plugins will be lost 
	- taking AMI is one idea, but we have multiple instances, it will be costly
	- create s3 bucket
		- bucket name: sam-project-9704
		- region : any region
		- create bucket
	- Create IAM role
		- EC2 instance
		- S3 full access
		- role name: sam-cicd-s3fullaccess
	- Attach the roles to all the instances(jenkins,sonar,nexus)
	
	- login to jenkins instance
	- sudo su -
	$ systemctl stop jenkins
	$ cd /var/lib/
	$ ls -l
	$ du -sh jenkins
	- clean the data in the jenkins server
	$ cd /var/lib/jenkins/.m2
	$ cd repository
	$ rm -rf *
	$ cd workspace
	$ rm -rf*
	$ cd /var/lib/jenkins/jobs/BuildProject/builds
	$ ls
	$ rm -rf (folder with numbers)
	$ cd ../..
	$ du -sh
	$ du -sh*
	$ cd /var/lib/jenkins
	$ cd jobs
	$ cd /var/lib/
	$ tar -czvf jenkins_cicdjobs.tar.gz jenkins
	$ ls jenkins_cicdjobs.tar.gz
	$ du -sh jenkins_cicdjobs.tar.gz
	$ sudo apt update && apt install awscli -y
	$ aws s3 cp jenkins_cicdjobs.tar.gz s3://sam-project-9704
	
	-- login to nexus
	$ systemctl stop nexus
	$ tar -czvf nexus-cicd-sam.tar.gz nexus
	$ aws s3 cp nexus-cicd-sam.tar.gz s3://sam-project-9704
	
	--- login to sonarqube
	$ systemctl stop sonarqube
	$ cd /opt
	$ tar -czvf sonarqube-cicd.tar.gz 
	$ aws s3 cp sonarqube-cicd.tar.gz s3://sam-project-9704
	$ aws s3 ls s3://sam-project-9704
	
	----------------------
	now the restoration part
	
		- take a ubuntu server install jenkins
		- sudo -i
		$ systemctl stop jenkins
		$ cd /var/lib
		$ ls -ld jenkins
		- ownership will be jenkins
		- once restoration complete 
		- change the owner back to jenkins
		- attach the sam-cicd-s3fullaccess to this jenkins instances
		$ aws s3 cp s3://sam-project-9704/jenkins_cicdjobs.tar.gz
		$ tar xzvf jenkins_cicdjobs.tar.gz
		$ chown jenkins.jenkins jenkins -R
		$ systemctl start jenkins
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		