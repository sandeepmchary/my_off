Section_9_Continous_Integration_of_Java_Web_application
	- Introduction
		- Continous Delivery & Tools
			- Agile Sdlc
			- Developers make regular code changes
			- These commits needs to be Build & Tested
		- Current situation
			- package/sw/artifact deployment on server
			- Sw testing/Integration testing after deployment
			- Test results evaluated and approval for prod deploy issued
		Problem
			- In an Agile SDLC, there will be frequent code changes
			- Manual code deploy is time consuming
			- Involving tasks,ticketing,approvals
			- Dependency on Ops,build& Release Team
		FIX:
			- Build,Test&deploy & test for every commit
			- automated process
			- notify for every build status
			- fix code if bugs r error found instantly rather waiting
	
	- Continous Delivery Process:
		- jenkins
		- git
		- maven
		- slack
		- nexus
		- sonarqube
		- tomcat
		- selenium
		- windows server
		- aws
		
	- Build Diagram
		- Developers 
		- Git
		- jenkins
			* build
			* Unit Test
			- notify to slack
		- Trigger build
		- s/w packing artifact
			* build artifact
			* Version
			* Push artifact to repository
		- Staging Environment
			* Integration testing
			* Load testing
			* Misc testing
			- moved to storage service( here we need to wait for the approval )
		- After approval 
			- Deploy to production
		
	- Flow of execution
		- login to aws ec2 
		- login key
		- Create SG
			* jenkins
			* sonarqube
			* nexus
		- Create Ec2 instance with userdata
			* jenkins
			* sonarqube
			* nexus
		- jenkins post installations
		- nexus repository setup
			* 3 repos
		- sonarqube post installations
		- jenkins steps
			* Build job
			* Setup slack notification
			* Checkstyle code analysis job
			* setup sonarqube integration
			* sonar code analysis job
			* artifact upload job
		- connect all jobs together with build pipeline
		- set automatic build trigger
		- Test with GIT
		- create sg 
			* windows server
			* tomcat & backend servers
		- setup tomcat & backend server on ec2 with userdata
		- Create jenkins job to Deploy artifact to staging
		- add windows node as jenkins slave
		- create job to run s.w tests(selenium) from windows server
		- Deploy artifact to production tomcat server
		- connect all jobs with build pipeline
		- Test it by commiting code to github
*******************************************************************************************************************'058 b. Continuous Integration Project
	- create a keypair
	- create sg for jenkins 8080,22
		- sg: sonarqube-sg Description: Allow sonar to access jenkins to quality gates results
	- create sg for nexus 8081,22
	- allow 8081 from jenkins sg
		- 8081 sg:jenkins-sg Description : Allow jenkins to upload artifact
	- create sg for sonar 80
		- 80 sg: jenkins-sg Description: Allow jenkins to upload reports
	- BRANCH WE USE CI-JENKINS
	- 3 T2.SMALL (nexus - centos,jenkins,sonar - ubuntu)
	- SAME AS SECTION_6_CONTINOUS_INTEGRATION_USING_JENKINS_NEXUS_SONARQUBE_SLACK
	setup nexus sonarqube servers:
	
	- from the git we get the shell scripts for that 
	- we need 3 ec2 and copy the userdata on the respective ec2
	- select the jenkins security group
	- nexus is on centos 7 and remaining 2 r in ubuntu-machine (t2.medium)
	- sonarqube (t2.medium)
	- install jenkins
		_ NEXUS:
			
			- now to go to nexu server
			- ssh to nexus find the file 
			- enable 
			- enable annoumous action (if we disable it then we have to authenticate it with username and password for every tool this is recommended way)
			- go to repository 
			- create 3 repository
			- maven2(hosted) - 
				- here we upload the artifact
				- Name: samantha-release
				  online: check
				- create repository
	        - maven2(proxy): to store the maven dependency,build tool download the dependencies from here
				- name: samantha-maven-central
				  proxy:
					Remote storage:
						check for eg: 
					- The dependencies will be download from the eg: url and stored in the samantha-maven-central(repo)
			- create repository
			
			- maven2(group):
				- here we group above both repositories
				group:
					Member repositories
				- name: samantha-maven-group
					- select repositories
						- samantha-maven-central
						- samantha-release
			- create repository
			
			
			- maven(hosted) (IF WE WANT TO CHANGE THE RELEASE TO SNAPSHOT)
				- ALL SAME 
				- NAME: samantha-snapshot
				- CHANGE THE VERSION TO 
					- SNAPSHOT
			- create repository
			
			- maven(group):
				add the 
				group:
					Member repositories
						samantha-snapshot
			- save
		    - we dont use this snapshot
			
			- go to repositories
				- samantha-maven-central
					- 
			- now we have to change the settings.xml in the source code 
			- in the settings.xml under the id of the repository snap-repo,release-repo are variable we have to pass the value 
			- in the pom.xml file we have repositories information at the end
			
			
			
		- - under jenkins server
		- go to free style project (build)
		- source code
			- Git
				- Repo URL: https://github.com/devopshydclub/vprofile-project.git
			- Branch to build:
				- */ci-jenkins
			- Build	
				- Invoke toplevel maven target
					- Goals: install -DskipTests(this will skip the tests)
					- Advanced
						properties:
	    					  SNAP-REPO=samantha-snapshot
     						  NEXUS-USER=admin
							  NEXUS-PASS=admin123
							  RELEASE-REPO=samantha-release
							  CENTRAL-REPO=samantha-maven-central
							  NEXUS-GRP-REPO=samantha-maven-group
							  NEXUSIP=privateIP
							  NEXUSPORT=8081
		     		- this will use the pom.xml which is already in the source code
						- Properties: 
						- setting file: settings file in the file system
							file path: settings.xml
					- SAVE
					- build now
					- check the log 
					- it should run all the parameters we passed in the mave
					- under the NEXUS - browse(box type) - under the samantha-maven-central (we can see the artifacts stored here)
					- under samantha-maven-group
					
					
					
		- - now the  build is success 
			- now the developers should know this 
			- with slack developers get the notification
			- whether the build is success or fail
			- go slack.com
			-  create account
			-  select/create the workspace
			-  samantha-devops
			-  general
			-  channel
			- create channel
			- jenkins(name it)
			
			- create a bot (api.slack.com)
			- start building
			- create an app
			- name it(jenkins)
			- select the workspace
			- oath&permission
			- add an oauth space
			- chat:write
			- install app to workspace
			- allow
			- copy the token
			- go to channel
			- at the chat
			- @jenkins(app name)
			- invite to channel
		
		- under the jenkins
			- manage jenkins
					- plugins
					- available
					- (slack)
					- slack notification
					- install with out restart
			- credentials
				- manage jenkins
				- manage credentials
				- jenkins
				- global credentials
				- add credentials
				- kind: secret text
				- secret : paste it
				- ID: slack token
				- OK
			- Integrate
				- manage jenkins
				- configure system
				- look for slack setting
				- custom slack bot user (check it )
				- save
				- go to the job
				- configure
				- (send the notification)
				- post build actions
				- slack notification
				- check all
				- Advanced
				- Upload build artifact
				- workspace(name it)
				- credentials
				- slack-token
				- channel/member id (jenkins)
				- Test Connection
			- post build action
			- archive the artifact (**/*.war)
			- SAVE
			- build now
	
	
	
	
		- - under jenkins
	- free style project 
	- Test(name)
	- copy from Build job
	- Goals: test
	- don't archive the artifact here
	- save
	- build now
	- NOW WE HAVE TWO JOBS
		- NOW INTEGRATE THE JOBS 
			- after the build job is completed then we run the test job
			- go to build job
					- configure
					- post build action
					- build other projects
					- (projects to build)
					- Test(,)
			- save
			- if we refresh it we can see the down stream project is "Test"
		- for integration test, we can run one more job for integration 
			- integration Test
			-free style
			- copy from (Test)
			- (build) verify -DskipUnitTests
			- SAVE
			- now integrate with test job with integration job
			- go to test job 
						- configure
						- build other project
						- integration test
						- SAVE
			- build now
			- refresh
			- now the upstream is "build" and downstream is "Intergration Test"
			- now we have 3 jobs connected to together
			
			
			
	- CODE ANALYSIS:
		simple code analysis with check style 
			- manage jenkins 
			- plugins 
			- available 
			- check style (search),violations 
			- install without restart

		- create a 
			- new job 
			- code-analysis(name it) 
			- free style 
			- copy from (build)

		- Goals:
			- checkstyle:checkstyle
		- no archiving
		- SAVE
		- build now 
		- look for checkstyle-result.xml under the workspace/target 
		- here we have around 96 warnings
		- if we want to check 
		- configure branch 
		- */vp-rem
		- (this branch does not have settings.xml file )
		- Build (advanced)
		- setting files
		- use default maven settings
		- file settings (remove it)
		- save
		- build
		
		- in this branch we have more warnings/errors but still running
		- what if we dont want to tolerate if the errors are more than 100 
		- then we use violations plugins
		- checkstyle-result.xml is the file setting the violations
		- go to code-analysis
				- post build actions
				- report violations
				- checkstyle and other patterns are available
				- checkstyle
				- (give the file name) target/checkstyle-result.xml
				- SAVE
		- now change the branch name to 
			- ci-jenkins
			- Build
			- Advanced
			- setting file : setting file in filesystem			
			file path : setting.xml - SAVE 
			
		- this job will pass becoz ci-jenkins has less than 100 warnings 
		- the build is success
		- go to - integration test
				- configure
				- Add post build actions
				- build another job
				- projects to build : code-analysis
				- SAVE
		- BUILD - TEST - INTEGRATION TEST - CODE-ANALYSIS( THIS IS THE SEQUENCE)
		
		
		
		
	SONAR-SCANNER-CODE-ANALYSIS:
	
		- we do one more code analysis with sonarqube scanner and publish that code to sonarqube scanner and checkstyle to sonarqube server dashboard
		- sonarqube server up and running
		- integrate b/w sonaq and jenkins 
		- sonarqube
		- login
		- admin
		- security 
		- Generate Token (sonartoken)
		- Generate
		- copy the token - 
	

	- go to jenkins
	- manage jenkins
	- plugins
	- search for (sonar) - check (sonarqube scanner & sonar quality gates)
	- install with restart 
		- global tool configuration
		- sonarqube scanner
		- add sonarqube scanner
		- Name: sonar:4.4.2170
		- install from select the version
		- SAVE
		
		- configure system
		- sonarqube servers
		- check (enable injections)
		- Add sonarqube
			- Name: sonar-sam
			- server url : http://(private ip of sonarqube)
			- server authentication token (add)
			- jenkins - kind: secret text
			- secret: paste the token we copied from the sonarqube
			- add
		- quality gates
		- sonarqube - name : sonar-sam
		- url : http://(privateIP of sonarqube)
		- authenticate: (paste the token we copied from the sonarqube)
        - SAVE
		
		- new item
		- SONAR-SCANNER-CODE-ANALYSIS(name of free sytle project)
			- copy from : Build
			- Build
			- Goals: install
			- (no archive artifact)
			- Add build step
			- execute sonarqube scanner
			(here we have analysis properties it is used for what project is used on the sonarqube server,source code to scan,surefire reports,check style analysis result)(in our source code we have source analysis properties it has only project key,project name,project version,sources,java.binaries,jacoco reportsPath,checkstyle.reports.path)
		- paste the content of source analysis properties in the analysis properties
		- Add build step
		- invoke toplevel maven targets
		- checkstyle:checkstyle
		- SAVE
		- build now
		- go to sonarqube server
		- projects
		- check the project
		- for testing we can change the branch to
		- configure
		- branches to build
		- (*/vp-rem)
		- remove setting.xml from
		-Build
		- Advanced section
		- use default maven settings
		- save
		- buildnow
		- in the sonarqube server
		- project - (the bugs will increase)
		- quality gate
		- create
		- Name: sam-quality-gates
		- save 
			- Add condition
			- on overall code
			- bugs
			- value
			- 50
			- add condition
		- select the project
		- quality-gates
		- sam-quality-gates 
		-- go to jenkins(to validate the quality-gates)
		- configure(sonarscanner-code-analysis)
		- add post build actions
		- quality-gates sonarqube plugins
		- project key: (same as in the source analysis properties)
		- job status when the analysis fails (failed) 
		- SAVE
		- buildnow
		- it will fail
		- check the logs
		- quality-gates plugin passed : false
		
		
		
	- - uploading artifact to nexus to server
	- artifact are in Build job/Workspace/target/vprofile-v2.war(change the version then upload to nexus)
	- nexus artifact uploader,copy artifact,zentimestamp (plugin install)
	- new item (Deploy_to_nexus)
	- Build - Add Build step
	- copy artifact from another project
	- project name: build
	- artifacts to copy : **/*.war 
	- Add build step
		- Nexus artifact uploader
		- Nexus version: NEXUS3
		- NEXUS url: <privateip of nexus:8081
		-- credentials
		- Add
		- jenkins
		- kind: username & passwd
		- username : xxxxxx - Passwd : xxxxx
		- Group id : QA
		- version: V$BUILD_ID
		- repository: samantha-release
		- Artifact
		- Add
		- Artifactid: $BUILD_TIMESTAMP
		- Type:war
		-file: target/vprofile-v2.war 
		
	- post build action
	- slack notification
	- select all
	- advanced
	- workspace : jenkins
	- credentials:slack-token
	- channel : # jenkins
	- test connection
	- save
	- buildnow
		- under general
		- change the date pattern
		- date & time patterns : yy-MM-dd_HH-mm
	- go to samantha-release we find the war files
    - to go sonar-scanner-code-analysis
	- post build actions
	- build other projects
	- projects to build: Deploy_to_nexus	
	
	
	
	- build pipeline (install plugin)
	- go to dashboard on jenkins
	- we find all the jobs
	- click on the + symbol
	- view name: vprofile-CI
	- build pipeline view - ok
	- Pipeline FLOW
		- Upstream/downstream config
			- Select intial job : Build
	- Display Options
		-  no of display builds : 5
		- OK
	- Run
	- go to nexus we get new version artifact here 
	- stop all the instances


	- Git poll : every minute
******************************************************************************************************************
059 c. Branch & Code Analysis warning update
	- In the build job change the branch ci-jenkins to cd-jenkins
	- In the Test job change the branch ci-jenkins to cd-jenkins
	- In the Intergration job change the branch ci-jenkins to cd-jenkins
	- In the Code-analysis job change the branch ci-jenkins to cd-jenkins
		- violations reports to 10 1000 1000 target/checkstyle-result.xml
	- In the sonar-scanner-Code-analysis job change the branch ci-jenkins to cd-jenkins
	- In the Deploy to Nexus job change the branch ci-jenkins to cd-jenkins

******************************************************************************************************************

060 d. Tomcat, Mysql, Memcache & Queue Setup
	- creat sg (tomcat,mysql,memcache)
		- Name: sam-app-backend-staging
		- inbound
			- port:22
			- port:8080
			- port:8080
				- sg: jenkins-sg Description: Allow jenkins to deploy artifact
			- save it
			- we get a new sg
			
			- again in the same sg add all traffice 
				- with same sg name
		- Name: windows-server
			- inbound
				- port: 3389
				- All Traffic: JENKINS security group
				- Description: Allow jenkins to connect slave
		- again in the jenkins sg 
			- add 
				- all traffic
				- sg: windows-server sg
				- Description: Allow windows server to connect to jenkins
	
	- Under the git ci-jenkins branch
		$ cd userdata
		- tomcat-provision.sh (ubuntu)(t2.micro)(copy the sh with tomcat-provision.sh)
			- nameit: app01-stagging
			- sg: sam-app-backend-staging
		- backend-stack.sh(on centos machine)(in the backend we setup 3 services memcache,mysql,rabbitmq)
			- centos 7
			- t2.micro
			- copy the backend-stack.sh (paste it under the userdata)
			- Name it; backend01-staging
			- sg: sam-app-backend-staging
******************************************************************************************************************

061 e. Build, Deploy & Test URL Job
	- jenkins,sonarqube,nexus,app01,backend01 is running state
	- after changing the branch job will become unstable
	- so change the quality-gates in the sonarqube
	- check in the section-6 process for setting the quality-gates
		- change the value to 100 in condition
	- every thing is good to go
	- now the job is to deploy artifact to tomcat server
	- plugins (jenkins)
	- available
	- deploy to container
	- install without restart
	- new item
		- name: sam-stagging-deploy
		- free style project
		- BUILD
			- add build step
				- copy artifact from another project
				- project name: BUILD
				- Artifacts to copy : **/.*war
				- save
			- build now
		- configure
		- post build actions
			- deploy war/ear to container
				- war/ear to deploy : target/vprofile-v2.war
				- container: tomcat8
					- credentials of tomcat can be found in the tomcat-provision.sh file
					- username: tomcat
					- password: admin123
				- credentials: check for the above
				- context path: samapp
				- tomcat URL: (copy the app01 private ip)
				- save
				- check whether tomcat service is up or not 
				- build now
				- after success 
				- we can see the sampp in the tomcat manage app
				- click on samapp
				- it will take it to vprofile login page
	- goto builds
		- BUILD
			- before goals
			- add build step
				- select execute shell
				- drag this above the goals
				- in the execute shell
				- cat << EOT > src/main/resources/application.properties
				   (PASTE THE CONTENT OF THE APPLICAION.Properties)
				   (PASTE THE PRIVATE IP IN PLACE OF db01,mc01,rm01)
				   EOT
	- goto Deploy-to-nexus
		- post build actions
		- projects to build: sam-stagging-deploy
	


	- for smoke test,it will just check the url
		- http request in the plugin
	- New item: TestURL
	- free style
	- BUILD
	- after deploy we have to wait for few minutes to deploy
	- add build step 
	- execute shell
	- sleep 60
	- add build step
	- HTTP request
		- http://<public ip of the tomcat URL:8080>
	- save
	
	
	- now to goto to sam-stagging-deploy project
		- configure
		- post build actions
		- build other project
		- TestURL
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		