1)
	- Section-1: Prerequistes
		- Monolithic
		- Microservices
		- containers
		- physical vs docker vs containers
		- Docker
	- Section-2: Introduction to kubernetes
		- Container Orchestration Engine
		- Top 3- COEs
		- kubernetes
		- kubernetes Architecture
	- Section-3: setting up kubernetes
		- kubernetes installation methods
		- play with k8s
		- Minikube
		- Google kubernetes Engine
		- kubeadm
		- kubectl
	- Section-4: Pods
		- pods
	- Section-5: Pods configuration
		- ConfigMaps
		- secrets
	- Section-6: Controllers
		- Replication Controllers
		- Replica Set
		- Deployment
		- DeamonSet
		- Jobs
	- Section-7: Services
		- services
		- NodePort Services
		- LoadBalancer Services
		- Cluster Ip Services
	- Section-8: Storage
		- Volumes
		- Empty directories
		- Hostpath
		- GCE persistantDisk
		- PV & PVC
		- Static volume Provisioning
		- Dynamic volume Provisioning
--------------------------------------------------------------------------------------------------------------------
2)
	- Monolithic Architecture and its drawbacks (Theory)
3)	
	- Microservices and its advantages (Theory)
--------------------------------------------------------------------------------------------------------------------
4)	
	- Containers
		- Google runs most of the services in Gmail Youtube inside containers
		- Google runs over a avarage of 2 Billions containers per week
	- Objectives
		- containers in general (Theory)
		- containers in IT (Theory)
		- containers Architecture
		- advantages
		- container Engines
		
			- containers Architecture
				- virtual Machines virtualizes at H/W level
				- containers virtualizes at os level
				- these containers contains only required libraries and app services
				- Benefits:
					- very light weight
					- Boots at seconds
					- Takes fraction of disk and memory space
				- Advantages:
					- protability: no comatabilty issues,package all the code and containerize it 
					- Resource Efficiency : vm takes GB of data, but containers take only small gbs,reduces data center costs
					- Isolation: two containers dont communicate untill it is required,if one container crashes and another containers very smoothly without any app downtime
					- Speed: speeds up development process
					- Scaling: horizantal scaling,we can add identical containers within a cluster
			    - Container Engines: Docker and Rocket,Docker is most popular
	
--------------------------------------------------------------------------------------------------------------------
5) pyhsical vs vm vs containers (Theory)
--------------------------------------------------------------------------------------------------------------------6) Docker (we already knew)
--------------------------------------------------------------------------------------------------------------------
7) 
	- container orchestration Engine
		- When COE is not always required
		- But,when will it be the problem ?
		- What is container orchestration Engine?
		- COE features
	
	- when COE is not always required ?
		- for small scale it is not required
	- But,when will it be the problem ?
		- for mid and large scale industries
			- clustering 
			- scalability
				- clustering:
					- if we use docker without docker swarm mode the service may come down,we are limited to manage on the single hosts,since is not clustering of servers, in case the server fails the app comes down
				- scalability:
					- for ex the company released a new product the traffic is high,to scale up and down we need a tool called containers orchestration engine
    - What is container orchestration Engine?
		- container orchestration engine automates 
			- deploying
			- scaling
			- managing, containerized apps on group of servers
		- 