- what is minikube
- 3 machines 1 master, 2 workers
- Overview of 
	- pod
	- replica controller & replica set
	- deployment
	- namespace
	- service
- k8s architecture
- pod creation 
	- kubeclt run
	- kubeclt create
	- kubeclt apply
- pod crud
- manual scheduling
- label selectors
- tent & tolrance
- node selection and node affinity
- resource requirements cmds & arguments,env variables
- init container
- multi container
- life cycle of pod
- services
- replica set & replica controller
- deployment
- rolling update
- rollback
- autoscaling
- namespace
- domainset
- static ports
- config map
- secret
- service account
- readyness and liviness
- cron job
-------------------------------------------------------------------------------------------------------------------
2. Kubernetes ( In Hindi ) Installation Minikube
	- To check if virtualization is supported on Linux, run the following command and verify that the output is non-empty:
	- grep -E --color 'vmx|svm' /proc/cpuinfo
	- Install kubectl binary with curl on Linux
		Download the latest release with the command:

		curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
		
Validate the binary (optional)

Download the kubectl checksum file:

curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"

Validate the kubectl binary against the checksum file:

echo "$(<kubectl.sha256) kubectl" | sha256sum --check

Install kubectl

sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

Note:
If you do not have root access on the target system, you can still install kubectl to the ~/.local/bin directory:

chmod +x kubectl
mkdir -p ~/.local/bin/kubectl
mv ./kubectl ~/.local/bin/kubectl
# and then add ~/.local/bin/kubectl to $PATH

Test to ensure the version you installed is up-to-date:

kubectl version --client


	- Install Minikube via direct download
		- curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
			&& chmod +x minikube
	- Here's an easy way to add the Minikube executable to your path:

		sudo mkdir -p /usr/local/bin/
		sudo install minikube /usr/local/bin/
---------------------------------------------------------------------------------------
3. Kubernetes ( In Hindi ) Installation 3 Node kubernetes cluster in ubuntu (virtual box)
 - swap should be off in all the worker nodes
 - $ free -h
 - $ sudo swapoff -a
 - free -h (here we dont get the swap 0b)
 - do this on all the worker node
 - if we restarts the swap will be on to make permanently disable swap 
 - vi /etc/fstab
 - # comment off all the lines which starts with swap
 -----
	- Install docker on all the servers master and slaves
 
 




Agenda: Kubernetes Setup Using Kubeadm In AWS EC2 Ubuntu Servers
=======================================================

Prerequisite:
==========

3 - Ubuntu Serves

1 - Manager  (4GB RAM , 2 Core) t2.medium

2 - Workers  (1 GB, 1 Core)     t2.micro


Note: Open Required Ports In AWS Security Groups. For now we will open All trafic.

==========COMMON FOR MASTER & SLAVES START ====

# First, login as ‘root’ user because the following set of commands need to be executed with ‘sudo’ permissions.

sudo su -

# Install Required packages and apt keys.

apt-get update -y
apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update -y



#Turn Off Swap Space

swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Install And Enable Docker

apt install docker.io -y
usermod -aG docker ubuntu
systemctl restart docker
systemctl enable docker.service


#Install kubeadm, Kubelet And Kubectl

apt-get install -y kubelet kubeadm kubectl kubernetes-cni

# Enable and start kubelet service

systemctl daemon-reload
systemctl start kubelet
systemctl enable kubelet.service

==========COMMON FOR MASTER & SLAVES END=====



===========In Master Node Start====================
# Steps Only For Kubernetes Master

# Switch to the root user.

sudo su -

# Initialize Kubernates master by executing below commond.

kubeadm init

#exit root user & exeucte as normal user

exit

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


# To verify, if kubectl is working or not, run the following command.

kubectl get pods -o wide --all-namespaces

#You will notice from the previous command, that all the pods are running except one: ‘kube-dns’. For resolving this we will install a # pod network. To install the weave pod network, run the following command:

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

kubectl get nodes

kubectl get pods --all-namespaces


# Get token

kubeadm token create --print-join-command

=========In Master Node End====================


Add Worker Machines to Kubernates Master
=========================================

Copy kubeadm join token from and execute in Worker Nodes to join to cluster



kubectl commonds has to be executed in master machine.

Check Nodes
=============

kubectl get nodes


Deploy Sample Application
==========================

kubectl run nginx-demo --image=nginx --port=80

kubectl expose deployment nginx-demo --port=80 --type=NodePort


Get Node Port details
=====================
kubectl get services


-------------------------------------------------------------------------------------------------------------------
4. Kubernetes ( In Hindi ) : what/why is kubernetes?
	- zero down time (blue green deployment)
	- autoscaling
		- irctc
		- results (ou)
		- World cup (ESPN,Ten sports)
	- kubernetes overview
		- pod is smallest unit in k8s
		- pod contains  multiple volumes,container this is managed by k8s
		- n/w is assigned to pod
	- Replica set
		- Desired = Active
		- ETCD takes care
	- Deployment
		- Node
		- POD
		- Replica set
		- Deployment
	- NameSpace
		- namespace 1
			- Services
			- pod 1
			- pod 2
		- namespace 2
			- service
			- pod 1
			- pod 2
	- SERVICE
		- if we have 2 nodes, if the enduser request/traffic node1 port no 30015 or else node2 port no 30015 
		,it direcly goes to service 
		- the service loadbalance on the pods
		- mostly used for traffic redirect or port mapping
		- 