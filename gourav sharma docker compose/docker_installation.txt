Docker installation:
    sudo yum install -y yum-utils
    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    sudo yumc-config-manager --enable docker-ce
    sudo yum install -y docker-ce docker-ce-cli container.io
    sudo systemctl enable docker
    sudo systemctl start docker
    sudo usermod -aG docker ${USER}

DOCKER COMPOSE
    -  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - sudo chmod +x /usr/local/bin/docker-compose
    - sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    - docker-compose --version

WHAT WHY HOW
    - suppose we have 2 tier
        - web tier
        - DB tier
    - lets start a DB tier
    docker run --name somesql -e MYSQL_ROOT_PASSWORD=mypassword -d mysql:5.7
    docker exec -it somesql mysql -u root -p
    mysql > create database wordpress;

        - install wordpress

        docker run --name mywordpress -p 8080:80 -d wordpress
- in some industries the applicatio is configured this way
    - load balancer
    - Front end
    - back end
    - DB
    - redis
*** https://medium.com/@habibridho/how-to-easily-setup-wordpress-using-docker-a798081dc577
______________________________________________________________________________________
version: '3.3'
services: 
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment: 
      - MYSQL_ROOT_PASSWORD=mypassword
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
  
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports: 
      - "8080:80"
    restart: always
    environment: 
      - WORDPRESS_DB_HOST=db:3306
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wordpress
      - WORDPRESS_DB_NAME=wordpress
volumes: 
  db_data: {}
  
____________________________________________________________________
- docker run -it -d nginx
- but with docker-compose.yml
--------------------------------------
version: '3'
services: 
  webapp:
    image: nginx
    ports: 
      - "8000:80"
--------------------------------------
   for example
   at first we given as 
************************************
version: '3'
services: 
  webapp:
    image: nginx
    ports: 
      - "8000:80"
  webapp1:
     image: nginx
     ports: 
       - "8001:80"
************************************
- $ docker-compose up -d
all the stuff created 
- now change the docker-compose file again
************************************
version: '3'
services: 
  webapp:
    image: nginx
    ports: 
      - "8000:80"
  webapp1:
     image: nginx
     ports: 
       - "8002:80"
************************************
- docker-compose up -d
- the second container will be re-created and the first container is unchanged






























    

